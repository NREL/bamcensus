use crate::model::identifier::fips::State;
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum StateCode {
    Alabama,
    Alaska,
    Arizona,
    Arkansas,
    California,
    Colorado,
    Connecticut,
    Delaware,
    DistrictOfColumbia,
    Florida,
    Georgia,
    Hawaii,
    Idaho,
    Illinois,
    Indiana,
    Iowa,
    Kansas,
    Kentucky,
    Louisiana,
    Maine,
    Maryland,
    Massachusetts,
    Michigan,
    Minnesota,
    Mississippi,
    Missouri,
    Montana,
    Nebraska,
    Nevada,
    NewHampshire,
    NewJersey,
    NewMexico,
    NewYork,
    NorthCarolina,
    NorthDakota,
    Ohio,
    Oklahoma,
    Oregon,
    Pennsylvania,
    RhodeIsland,
    SouthCarolina,
    SouthDakota,
    Tennessee,
    Texas,
    Utah,
    Vermont,
    Virginia,
    Washington,
    WestVirginia,
    Wisconsin,
    Wyoming,
}

impl Into<State> for StateCode {
    fn into(self) -> State {
        match self {
            StateCode::Alabama => State(01),
            StateCode::Alaska => State(02),
            StateCode::Arizona => State(04),
            StateCode::Arkansas => State(05),
            StateCode::California => State(06),
            StateCode::Colorado => State(08),
            StateCode::Connecticut => State(09),
            StateCode::Delaware => State(10),
            StateCode::DistrictOfColumbia => State(11),
            StateCode::Florida => State(12),
            StateCode::Georgia => State(13),
            StateCode::Hawaii => State(15),
            StateCode::Idaho => State(16),
            StateCode::Illinois => State(17),
            StateCode::Indiana => State(18),
            StateCode::Iowa => State(19),
            StateCode::Kansas => State(20),
            StateCode::Kentucky => State(21),
            StateCode::Louisiana => State(22),
            StateCode::Maine => State(23),
            StateCode::Maryland => State(24),
            StateCode::Massachusetts => State(25),
            StateCode::Michigan => State(26),
            StateCode::Minnesota => State(27),
            StateCode::Mississippi => State(28),
            StateCode::Missouri => State(29),
            StateCode::Montana => State(30),
            StateCode::Nebraska => State(31),
            StateCode::Nevada => State(32),
            StateCode::NewHampshire => State(33),
            StateCode::NewJersey => State(34),
            StateCode::NewMexico => State(35),
            StateCode::NewYork => State(36),
            StateCode::NorthCarolina => State(37),
            StateCode::NorthDakota => State(38),
            StateCode::Ohio => State(39),
            StateCode::Oklahoma => State(40),
            StateCode::Oregon => State(41),
            StateCode::Pennsylvania => State(42),
            StateCode::RhodeIsland => State(44),
            StateCode::SouthCarolina => State(45),
            StateCode::SouthDakota => State(46),
            StateCode::Tennessee => State(47),
            StateCode::Texas => State(48),
            StateCode::Utah => State(49),
            StateCode::Vermont => State(50),
            StateCode::Virginia => State(51),
            StateCode::Washington => State(53),
            StateCode::WestVirginia => State(54),
            StateCode::Wisconsin => State(55),
            StateCode::Wyoming => State(56),
        }
    }
}

impl StateCode {
    /// a two-letter state abbreviation
    pub fn to_state_abbreviation(&self) -> String {
        match self {
            StateCode::Alabama => String::from("AL"),
            StateCode::Alaska => String::from("AK"),
            StateCode::Arizona => String::from("AZ"),
            StateCode::Arkansas => String::from("AR"),
            StateCode::California => String::from("CA"),
            StateCode::Colorado => String::from("CO"),
            StateCode::Connecticut => String::from("CT"),
            StateCode::Delaware => String::from("DE"),
            StateCode::DistrictOfColumbia => String::from("DC"),
            StateCode::Florida => String::from("FL"),
            StateCode::Georgia => String::from("GA"),
            StateCode::Hawaii => String::from("HI"),
            StateCode::Idaho => String::from("ID"),
            StateCode::Illinois => String::from("IL"),
            StateCode::Indiana => String::from("IN"),
            StateCode::Iowa => String::from("IA"),
            StateCode::Kansas => String::from("KS"),
            StateCode::Kentucky => String::from("Ky"),
            StateCode::Louisiana => String::from("LA"),
            StateCode::Maine => String::from("ME"),
            StateCode::Maryland => String::from("MD"),
            StateCode::Massachusetts => String::from("MA"),
            StateCode::Michigan => String::from("MI"),
            StateCode::Minnesota => String::from("MN"),
            StateCode::Mississippi => String::from("MS"),
            StateCode::Missouri => String::from("MO"),
            StateCode::Montana => String::from("MT"),
            StateCode::Nebraska => String::from("NE"),
            StateCode::Nevada => String::from("NV"),
            StateCode::NewHampshire => String::from("NH"),
            StateCode::NewJersey => String::from("NJ"),
            StateCode::NewMexico => String::from("NM"),
            StateCode::NewYork => String::from("NY"),
            StateCode::NorthCarolina => String::from("NC"),
            StateCode::NorthDakota => String::from("ND"),
            StateCode::Ohio => String::from("OH"),
            StateCode::Oklahoma => String::from("OK"),
            StateCode::Oregon => String::from("OR"),
            StateCode::Pennsylvania => String::from("PA"),
            StateCode::RhodeIsland => String::from("RI"),
            StateCode::SouthCarolina => String::from("SC"),
            StateCode::SouthDakota => String::from("SD"),
            StateCode::Tennessee => String::from("TN"),
            StateCode::Texas => String::from("TX"),
            StateCode::Utah => String::from("UT"),
            StateCode::Vermont => String::from("VT"),
            StateCode::Virginia => String::from("VA"),
            StateCode::Washington => String::from("WA"),
            StateCode::WestVirginia => String::from("WV"),
            StateCode::Wisconsin => String::from("WI"),
            StateCode::Wyoming => String::from("WY"),
        }
    }
}
